const { getDbConnection } = require('../config/db.config');

/**
 * Demo c√°ch API l·∫•y d·ªØ li·ªáu t·ª´ 4 server SQL
 */
class ShardingDemo {
  
  /**
   * Demo 1: L·∫•y d·ªØ li·ªáu Global (Master DB)
   */
  static async demoGlobalQueries() {
    console.log('üåê === GLOBAL QUERIES (Master DB) ===');
    
    // L·∫•y connection cho global queries
    const masterConnection = getDbConnection(null, true, false);
    console.log('üì° Connection: Master DB');
    
    // V√≠ d·ª•: L·∫•y danh s√°ch nh√† cung c·∫•p
    console.log('üìã L·∫•y danh s√°ch nh√† cung c·∫•p...');
    // const nhaCungCaps = await masterConnection.models.NhaCungCap.findAll();
    
    // V√≠ d·ª•: L·∫•y danh s√°ch s·∫£n ph·∫©m
    console.log('üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m...');
    // const sanPhams = await masterConnection.models.SanPham.findAll();
    
    console.log('‚úÖ Global queries lu√¥n l·∫•y t·ª´ Master DB\n');
  }

  /**
   * Demo 2: L·∫•y d·ªØ li·ªáu theo Khu V·ª±c (Sharded)
   */
  static async demoShardedQueries() {
    console.log('üè¢ === SHARDED QUERIES (Theo Khu V·ª±c) ===');
    
    const khuVucs = [
      { maKhuVuc: 1, tenKhuVuc: 'KV1', shard: 'shard1' },
      { maKhuVuc: 2, tenKhuVuc: 'KV2', shard: 'shard2' },
      { maKhuVuc: 3, tenKhuVuc: 'KV3', shard: 'shard3' },
      { maKhuVuc: 4, tenKhuVuc: 'KV4', shard: 'shard4' }
    ];

    for (const kv of khuVucs) {
      console.log(`\nüìç Khu v·ª±c: ${kv.tenKhuVuc} (MaKhuVuc: ${kv.maKhuVuc})`);
      
      // L·∫•y connection cho khu v·ª±c n√†y
      const shardConnection = getDbConnection(kv.maKhuVuc, false, false);
      console.log(`üì° Connection: ${kv.shard}`);
      
      // V√≠ d·ª•: L·∫•y kho h√†ng c·ªßa khu v·ª±c n√†y
      console.log(`üè™ L·∫•y kho h√†ng c·ªßa ${kv.tenKhuVuc}...`);
      // const khoHangs = await shardConnection.models.KhoHang.findAll({
      //   where: { MaKhuVuc: kv.maKhuVuc }
      // });
      
      // V√≠ d·ª•: L·∫•y t·ªìn kho c·ªßa khu v·ª±c n√†y
      console.log(`üìä L·∫•y t·ªìn kho c·ªßa ${kv.tenKhuVuc}...`);
      // const tonKhos = await shardConnection.models.TonKho.findAll({
      //   include: [{ model: shardConnection.models.KhoHang, where: { MaKhuVuc: kv.maKhuVuc } }]
      // });
    }
    
    console.log('\n‚úÖ Sharded queries l·∫•y t·ª´ shard t∆∞∆°ng ·ª©ng\n');
  }

  /**
   * Demo 3: Cross-Shard Operations
   */
  static async demoCrossShardOperations() {
    console.log('üîÑ === CROSS-SHARD OPERATIONS ===');
    
    // L·∫•y d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ shards
    const allShards = ['shard1', 'shard2', 'shard3', 'shard4'];
    const allTonKho = [];
    
    for (const shardName of allShards) {
      console.log(`üì° Querying ${shardName}...`);
      
      // Gi·∫£ s·ª≠ c√≥ connection ƒë·∫øn shard
      // const shardConnection = shards[shardName];
      // const tonKho = await shardConnection.models.TonKho.findAll();
      // allTonKho.push(...tonKho);
    }
    
    console.log('üìä Merge data from all shards...');
    console.log('‚úÖ Cross-shard operations query t·ª´ t·∫•t c·∫£ shards\n');
  }

  /**
   * Demo 4: Business Logic Flow
   */
  static async demoBusinessLogicFlow() {
    console.log('üíº === BUSINESS LOGIC FLOW ===');
    
    // Scenario: T·∫°o nh·∫≠p kho cho kho thu·ªôc KV2
    const maKho = 5; // Gi·∫£ s·ª≠ kho n√†y thu·ªôc KV2
    const maKhuVuc = 2; // KV2
    
    console.log(`üì• T·∫°o nh·∫≠p kho cho kho ${maKho} (thu·ªôc ${maKhuVuc})`);
    
    // 1. L·∫•y connection cho khu v·ª±c n√†y
    const shardConnection = getDbConnection(maKhuVuc, false, false);
    console.log(`üì° Connection: shard2 (v√¨ MaKhuVuc = ${maKhuVuc})`);
    
    // 2. T·∫°o phi·∫øu nh·∫≠p kho
    console.log('üìù T·∫°o phi·∫øu nh·∫≠p kho...');
    // const nhapKho = await shardConnection.models.NhapKho.create({
    //   MaKho: maKho,
    //   MaNCC: 1,
    //   NgayNhap: '2024-01-15',
    //   GhiChu: 'Nh·∫≠p h√†ng test'
    // });
    
    // 3. T·∫°o chi ti·∫øt nh·∫≠p kho
    console.log('üìã T·∫°o chi ti·∫øt nh·∫≠p kho...');
    // const chiTietNhap = await shardConnection.models.ChiTietNhap.create({
    //   MaNhap: nhapKho.MaNhap,
    //   MaSP: 1,
    //   SoLuong: 100,
    //   GiaNhap: 50000
    // });
    
    // 4. C·∫≠p nh·∫≠t t·ªìn kho
    console.log('üìä C·∫≠p nh·∫≠t t·ªìn kho...');
    // const tonKho = await shardConnection.models.TonKho.findOne({
    //   where: { MaSP: 1, MaKho: maKho }
    // });
    // await tonKho.update({ SoLuongTon: tonKho.SoLuongTon + 100 });
    
    console.log('‚úÖ T·∫•t c·∫£ operations ƒë·ªÅu th·ª±c hi·ªán tr√™n shard2\n');
  }

  /**
   * Demo 5: Error Handling & Fallback
   */
  static async demoErrorHandling() {
    console.log('‚ö†Ô∏è === ERROR HANDLING & FALLBACK ===');
    
    // Scenario: Shard2 b·ªã down
    const maKhuVuc = 2; // KV2
    
    try {
      console.log(`üîç Th·ª≠ k·∫øt n·ªëi ƒë·∫øn shard2 (KV${maKhuVuc})...`);
      const shardConnection = getDbConnection(maKhuVuc, false, false);
      
      // Gi·∫£ s·ª≠ connection b·ªã l·ªói
      // await shardConnection.authenticate();
      
    } catch (error) {
      console.log('‚ùå Shard2 b·ªã down!');
      console.log('üîÑ Fallback v·ªÅ Master DB...');
      
      // Fallback v·ªÅ Master DB
      const masterConnection = getDbConnection(null, true, false);
      console.log('‚úÖ S·ª≠ d·ª•ng Master DB l√†m fallback');
    }
    
    console.log('‚úÖ Error handling ho·∫°t ƒë·ªông t·ªët\n');
  }

  /**
   * Ch·∫°y t·∫•t c·∫£ demos
   */
  static async runAllDemos() {
    console.log('üöÄ === DEMO SHARDING ARCHITECTURE ===\n');
    
    await this.demoGlobalQueries();
    await this.demoShardedQueries();
    await this.demoCrossShardOperations();
    await this.demoBusinessLogicFlow();
    await this.demoErrorHandling();
    
    console.log('üéâ === DEMO COMPLETED ===');
  }
}

module.exports = ShardingDemo;
